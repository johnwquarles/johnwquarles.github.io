"use strict";

angular.module("indexPage", []).controller("Main", function (Colors, $scope) {
  var vm = this;
  var title = document.querySelector(".header h1");
  var randomColor = Colors.randomColor();
  var changeTime = 3000;
  var startTime;

  setInterval(function () {
    randomColor = Colors.randomColor();
  }, changeTime);

  title.style.color = randomColor;
  startTime = new Date().getTime();
  setInterval(function () {
    startTime = new Date().getTime();
    title.style.color = randomColor;
  }, changeTime);

  vm.iconColorChange = function () {
    var icons = [].slice.call(document.querySelectorAll(".link-button img, .contrib-button img, .feature-button img, .header img, i, span.tech"));
    var lis = [].slice.call(document.querySelectorAll(".topnav ul li i, p"));
    var nowTime = new Date().getTime();
    var deltaTime = nowTime - startTime;
    var offset = deltaTime % changeTime;
    var syncNextStart = changeTime - offset;

    setTimeout(function () {
      ChangeEachBorderColor(icons);
      ChangeEachLiColor(lis);

      setInterval(function () {
        ChangeEachBorderColor(icons);
        ChangeEachLiColor(lis);
      }, changeTime);
    }, syncNextStart);
  };

  function ChangeEachBorderColor(icons) {
    icons.forEach(function (icon) {
      icon.style.borderColor = randomColor;
      icon.style.color = randomColor;
    });
  }

  function ChangeEachLiColor(lis) {
    lis.forEach(function (li) {
      li.style.color = randomColor;
    });
  }

  vm.features = [{ img_url: "../img/earthinvasion.png",
    link_url: "http://quarl.es/earthinvasion",
    alt: "Earth Invasion",
    github_url: "https://github.com/johnwquarles",
    tech: "Tech: C#, Unity 3D",
    copy: "The invasion has begun! Take control               of the earth's last remaining defenses and fight               to the pulse-pounding beats of chiptune legend DJ Cutman.               Command a variety of powerful weaponry from multiple               2D and 3D perspectives as the music advances in time to your triumphs.               Will you deliver our salvation?" }];

  vm.mysites = [{ img_url: "../img/movieagenda.png",
    link_url: "http://quarl.es/movieagenda",
    alt: "Movie Agenda",
    github_url: "https://github.com/johnwquarles/movieagenda",
    tech: "Tech: Javascript, JQuery, Firebase, HTML5, Sass",
    copy: "Can't remember which films to catch? Make your own list               with MovieAgenda and have Metacritic & Rotten Tomato scores,               MPAA ratings, trailers and assorted clips all at your fingertips." }, { img_url: "../img/blackjack.png",
    link_url: "http://quarl.es/blackjack",
    alt: "Blackjack",
    github_url: "https://github.com/johnwquarles/blackjack",
    tech: "Tech: Javascript, JQuery, HTML5, Sass",
    copy: "Need a hit? Play a few hands of no-stakes Blackjack               and keep your bank account intact." }, { img_url: "../img/weather-app.png",
    link_url: "http://quarl.es/weather-app",
    alt: "Weather App",
    github_url: "https://github.com/johnwquarles/weather-app",
    tech: "Tech: Javascript, HTML5, CSS",
    copy: "No need to feel embarrassed-- we all forget to check               the weather sometimes. Quick, before anyone finds out!               Get your forecast by zip code or geolocation!               And for goodness' sake, check the five-day!" }, { img_url: "../img/stocksbocks.png",
    link_url: "http://quarl.es/stocksbocks",
    alt: "Stocksbocks",
    github_url: "https://github.com/johnwquarles/stocksbocks/tree/gh-pages",
    tech: "Tech: Javascript, JQuery, HTML5, CSS",
    copy: "If you're serious about business, you know stocks               and you know bocks. So prepare to have your socks rocked, doc!               Presenting STOCKSBOCKS." }, { img_url: "../img/armolegeddon.png",
    link_url: "http://quarl.es/armolegeddon",
    alt: "Armolegeddon",
    github_url: "https://github.com/johnwquarles/armolegeddon/tree/gh-pages",
    tech: "Tech: Javascript, HTML5, CSS",
    copy: "Moles! Holes! See if you can bop more of them than I can setTimeouts.               Thinking about it though, no, that's definitely impossible." }, { img_url: "../img/sketchy-etch.png",
    link_url: "http://quarl.es/sketchy-etch",
    alt: "Sketchy-Etch",
    github_url: "https://github.com/johnwquarles/sketchy-etch",
    tech: "Tech: Javascript, JQuery, HTML5, CSS",
    copy: "We all start somewhere! And by gum, if I'm going anywhere, I'm bringing               the Sketchy-Etch with me (could be a long car ride)." }];

  vm.contribs = [{ img_url: "../img/snacktn.png",
    link_url: "http://snacktn.com",
    alt: "Snack TN" }, { img_url: "../img/nashculturecrawl.png",
    link_url: "http://james-logan.github.io/nashville-adventure/",
    alt: "Nashville Culture Crawl" }];
}).factory("Colors", function () {
  return {

    randomColor: function randomColor() {
      return "#" + Math.floor(Math.random() * Math.pow(16, 6)).toString(16);
    }

  };
});
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbiAgLm1vZHVsZShcImluZGV4UGFnZVwiLCBbXSlcblxuICAuY29udHJvbGxlcignTWFpbicsIGZ1bmN0aW9uIChDb2xvcnMsICRzY29wZSl7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlciBoMVwiKTtcbiAgICB2YXIgcmFuZG9tQ29sb3IgPSBDb2xvcnMucmFuZG9tQ29sb3IoKTtcbiAgICB2YXIgY2hhbmdlVGltZSA9IDMwMDA7XG4gICAgdmFyIHN0YXJ0VGltZTtcblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICByYW5kb21Db2xvciA9IENvbG9ycy5yYW5kb21Db2xvcigpO1xuICAgIH0sIGNoYW5nZVRpbWUpO1xuXG4gICAgdGl0bGUuc3R5bGUuY29sb3IgPSByYW5kb21Db2xvcjtcbiAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdGl0bGUuc3R5bGUuY29sb3IgPSByYW5kb21Db2xvcjtcbiAgICB9LCBjaGFuZ2VUaW1lKVxuXG4gICAgdm0uaWNvbkNvbG9yQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaWNvbnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubGluay1idXR0b24gaW1nLCAuY29udHJpYi1idXR0b24gaW1nLCAuZmVhdHVyZS1idXR0b24gaW1nLCAuaGVhZGVyIGltZywgaSwgc3Bhbi50ZWNoXCIpKTtcbiAgICAgIHZhciBsaXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG9wbmF2IHVsIGxpIGksIHBcIikpO1xuICAgICAgdmFyIG5vd1RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHZhciBkZWx0YVRpbWUgPSBub3dUaW1lIC0gc3RhcnRUaW1lO1xuICAgICAgdmFyIG9mZnNldCA9IGRlbHRhVGltZSAlIGNoYW5nZVRpbWU7XG4gICAgICB2YXIgc3luY05leHRTdGFydCA9IGNoYW5nZVRpbWUgLSBvZmZzZXQ7XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIENoYW5nZUVhY2hCb3JkZXJDb2xvcihpY29ucyk7XG4gICAgICAgIENoYW5nZUVhY2hMaUNvbG9yKGxpcyk7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgQ2hhbmdlRWFjaEJvcmRlckNvbG9yKGljb25zKTtcbiAgICAgICAgICBDaGFuZ2VFYWNoTGlDb2xvcihsaXMpO1xuICAgICAgICB9LCBjaGFuZ2VUaW1lKVxuXG4gICAgICB9LCBzeW5jTmV4dFN0YXJ0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIENoYW5nZUVhY2hCb3JkZXJDb2xvcihpY29ucykge1xuICAgICAgaWNvbnMuZm9yRWFjaChmdW5jdGlvbihpY29uKXtcbiAgICAgICAgaWNvbi5zdHlsZS5ib3JkZXJDb2xvciA9IHJhbmRvbUNvbG9yO1xuICAgICAgICBpY29uLnN0eWxlLmNvbG9yID0gcmFuZG9tQ29sb3I7XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIENoYW5nZUVhY2hMaUNvbG9yKGxpcykge1xuICAgICAgbGlzLmZvckVhY2goZnVuY3Rpb24obGkpe1xuICAgICAgICBsaS5zdHlsZS5jb2xvciA9IHJhbmRvbUNvbG9yO1xuICAgICAgfSlcbiAgICB9XG5cbiAgICB2bS5mZWF0dXJlcyA9IFtcblxuICAgICAgeyBpbWdfdXJsOiBcIi4uL2ltZy9lYXJ0aGludmFzaW9uLnBuZ1wiLFxuICAgICAgICBsaW5rX3VybDogXCJodHRwOi8vcXVhcmwuZXMvZWFydGhpbnZhc2lvblwiLFxuICAgICAgICBhbHQ6IFwiRWFydGggSW52YXNpb25cIixcbiAgICAgICAgZ2l0aHViX3VybDogXCJodHRwczovL2dpdGh1Yi5jb20vam9obndxdWFybGVzXCIsXG4gICAgICAgIHRlY2g6IFwiVGVjaDogQyMsIFVuaXR5IDNEXCIsXG4gICAgICAgIGNvcHk6IFwiVGhlIGludmFzaW9uIGhhcyBiZWd1biEgVGFrZSBjb250cm9sIFxcXG4gICAgICAgICAgICAgIG9mIHRoZSBlYXJ0aCdzIGxhc3QgcmVtYWluaW5nIGRlZmVuc2VzIGFuZCBmaWdodCBcXFxuICAgICAgICAgICAgICB0byB0aGUgcHVsc2UtcG91bmRpbmcgYmVhdHMgb2YgY2hpcHR1bmUgbGVnZW5kIERKIEN1dG1hbi4gXFxcbiAgICAgICAgICAgICAgQ29tbWFuZCBhIHZhcmlldHkgb2YgcG93ZXJmdWwgd2VhcG9ucnkgZnJvbSBtdWx0aXBsZSBcXFxuICAgICAgICAgICAgICAyRCBhbmQgM0QgcGVyc3BlY3RpdmVzIGFzIHRoZSBtdXNpYyBhZHZhbmNlcyBpbiB0aW1lIHRvIHlvdXIgdHJpdW1waHMuIFxcXG4gICAgICAgICAgICAgIFdpbGwgeW91IGRlbGl2ZXIgb3VyIHNhbHZhdGlvbj9cIn1cblxuICAgIF1cblxuICAgIHZtLm15c2l0ZXMgPSBbXG5cbiAgICAgIHsgaW1nX3VybDogXCIuLi9pbWcvbW92aWVhZ2VuZGEucG5nXCIsXG4gICAgICAgIGxpbmtfdXJsOiBcImh0dHA6Ly9xdWFybC5lcy9tb3ZpZWFnZW5kYVwiLFxuICAgICAgICBhbHQ6IFwiTW92aWUgQWdlbmRhXCIsXG4gICAgICAgIGdpdGh1Yl91cmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL2pvaG53cXVhcmxlcy9tb3ZpZWFnZW5kYVwiLFxuICAgICAgICB0ZWNoOiBcIlRlY2g6IEphdmFzY3JpcHQsIEpRdWVyeSwgRmlyZWJhc2UsIEhUTUw1LCBTYXNzXCIsXG4gICAgICAgIGNvcHk6IFwiQ2FuJ3QgcmVtZW1iZXIgd2hpY2ggZmlsbXMgdG8gY2F0Y2g/IE1ha2UgeW91ciBvd24gbGlzdCBcXFxuICAgICAgICAgICAgICB3aXRoIE1vdmllQWdlbmRhIGFuZCBoYXZlIE1ldGFjcml0aWMgJiBSb3R0ZW4gVG9tYXRvIHNjb3JlcywgXFxcbiAgICAgICAgICAgICAgTVBBQSByYXRpbmdzLCB0cmFpbGVycyBhbmQgYXNzb3J0ZWQgY2xpcHMgYWxsIGF0IHlvdXIgZmluZ2VydGlwcy5cIn0sXG5cbiAgICAgIHsgaW1nX3VybDogXCIuLi9pbWcvYmxhY2tqYWNrLnBuZ1wiLFxuICAgICAgICBsaW5rX3VybDogXCJodHRwOi8vcXVhcmwuZXMvYmxhY2tqYWNrXCIsXG4gICAgICAgIGFsdDogXCJCbGFja2phY2tcIixcbiAgICAgICAgZ2l0aHViX3VybDogXCJodHRwczovL2dpdGh1Yi5jb20vam9obndxdWFybGVzL2JsYWNramFja1wiLFxuICAgICAgICB0ZWNoOiBcIlRlY2g6IEphdmFzY3JpcHQsIEpRdWVyeSwgSFRNTDUsIFNhc3NcIixcbiAgICAgICAgY29weTogXCJOZWVkIGEgaGl0PyBQbGF5IGEgZmV3IGhhbmRzIG9mIG5vLXN0YWtlcyBCbGFja2phY2sgXFxcbiAgICAgICAgICAgICAgYW5kIGtlZXAgeW91ciBiYW5rIGFjY291bnQgaW50YWN0LlwifSxcblxuICAgICAgeyBpbWdfdXJsOiBcIi4uL2ltZy93ZWF0aGVyLWFwcC5wbmdcIixcbiAgICAgICAgbGlua191cmw6IFwiaHR0cDovL3F1YXJsLmVzL3dlYXRoZXItYXBwXCIsXG4gICAgICAgIGFsdDogXCJXZWF0aGVyIEFwcFwiLFxuICAgICAgICBnaXRodWJfdXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9qb2hud3F1YXJsZXMvd2VhdGhlci1hcHBcIixcbiAgICAgICAgdGVjaDogXCJUZWNoOiBKYXZhc2NyaXB0LCBIVE1MNSwgQ1NTXCIsXG4gICAgICAgIGNvcHk6IFwiTm8gbmVlZCB0byBmZWVsIGVtYmFycmFzc2VkLS0gd2UgYWxsIGZvcmdldCB0byBjaGVjayBcXFxuICAgICAgICAgICAgICB0aGUgd2VhdGhlciBzb21ldGltZXMuIFF1aWNrLCBiZWZvcmUgYW55b25lIGZpbmRzIG91dCEgXFxcbiAgICAgICAgICAgICAgR2V0IHlvdXIgZm9yZWNhc3QgYnkgemlwIGNvZGUgb3IgZ2VvbG9jYXRpb24hIFxcXG4gICAgICAgICAgICAgIEFuZCBmb3IgZ29vZG5lc3MnIHNha2UsIGNoZWNrIHRoZSBmaXZlLWRheSFcIn0sXG5cbiAgICAgIHsgaW1nX3VybDogXCIuLi9pbWcvc3RvY2tzYm9ja3MucG5nXCIsXG4gICAgICAgIGxpbmtfdXJsOiBcImh0dHA6Ly9xdWFybC5lcy9zdG9ja3Nib2Nrc1wiLFxuICAgICAgICBhbHQ6IFwiU3RvY2tzYm9ja3NcIixcbiAgICAgICAgZ2l0aHViX3VybDogXCJodHRwczovL2dpdGh1Yi5jb20vam9obndxdWFybGVzL3N0b2Nrc2JvY2tzL3RyZWUvZ2gtcGFnZXNcIixcbiAgICAgICAgdGVjaDogXCJUZWNoOiBKYXZhc2NyaXB0LCBKUXVlcnksIEhUTUw1LCBDU1NcIixcbiAgICAgICAgY29weTogXCJJZiB5b3UncmUgc2VyaW91cyBhYm91dCBidXNpbmVzcywgeW91IGtub3cgc3RvY2tzIFxcXG4gICAgICAgICAgICAgIGFuZCB5b3Uga25vdyBib2Nrcy4gU28gcHJlcGFyZSB0byBoYXZlIHlvdXIgc29ja3Mgcm9ja2VkLCBkb2MhIFxcXG4gICAgICAgICAgICAgIFByZXNlbnRpbmcgU1RPQ0tTQk9DS1MuXCJ9LFxuXG4gICAgICB7IGltZ191cmw6IFwiLi4vaW1nL2FybW9sZWdlZGRvbi5wbmdcIixcbiAgICAgICAgbGlua191cmw6IFwiaHR0cDovL3F1YXJsLmVzL2FybW9sZWdlZGRvblwiLFxuICAgICAgICBhbHQ6IFwiQXJtb2xlZ2VkZG9uXCIsXG4gICAgICAgIGdpdGh1Yl91cmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL2pvaG53cXVhcmxlcy9hcm1vbGVnZWRkb24vdHJlZS9naC1wYWdlc1wiLFxuICAgICAgICB0ZWNoOiBcIlRlY2g6IEphdmFzY3JpcHQsIEhUTUw1LCBDU1NcIixcbiAgICAgICAgY29weTogXCJNb2xlcyEgSG9sZXMhIFNlZSBpZiB5b3UgY2FuIGJvcCBtb3JlIG9mIHRoZW0gdGhhbiBJIGNhbiBzZXRUaW1lb3V0cy4gXFxcbiAgICAgICAgICAgICAgVGhpbmtpbmcgYWJvdXQgaXQgdGhvdWdoLCBubywgdGhhdCdzIGRlZmluaXRlbHkgaW1wb3NzaWJsZS5cIn0sXG5cbiAgICAgIHsgaW1nX3VybDogXCIuLi9pbWcvc2tldGNoeS1ldGNoLnBuZ1wiLFxuICAgICAgICBsaW5rX3VybDogXCJodHRwOi8vcXVhcmwuZXMvc2tldGNoeS1ldGNoXCIsXG4gICAgICAgIGFsdDogXCJTa2V0Y2h5LUV0Y2hcIixcbiAgICAgICAgZ2l0aHViX3VybDogXCJodHRwczovL2dpdGh1Yi5jb20vam9obndxdWFybGVzL3NrZXRjaHktZXRjaFwiLFxuICAgICAgICB0ZWNoOiBcIlRlY2g6IEphdmFzY3JpcHQsIEpRdWVyeSwgSFRNTDUsIENTU1wiLFxuICAgICAgICBjb3B5OiBcIldlIGFsbCBzdGFydCBzb21ld2hlcmUhIEFuZCBieSBndW0sIGlmIEknbSBnb2luZyBhbnl3aGVyZSwgSSdtIGJyaW5naW5nIFxcXG4gICAgICAgICAgICAgIHRoZSBTa2V0Y2h5LUV0Y2ggd2l0aCBtZSAoY291bGQgYmUgYSBsb25nIGNhciByaWRlKS5cIn1cblxuICAgIF07XG5cbiAgICB2bS5jb250cmlicyA9IFtcblxuICAgICAgeyBpbWdfdXJsOiBcIi4uL2ltZy9zbmFja3RuLnBuZ1wiLFxuICAgICAgICBsaW5rX3VybDogXCJodHRwOi8vc25hY2t0bi5jb21cIixcbiAgICAgICAgYWx0OiBcIlNuYWNrIFROXCJ9LFxuXG4gICAgICB7IGltZ191cmw6IFwiLi4vaW1nL25hc2hjdWx0dXJlY3Jhd2wucG5nXCIsXG4gICAgICAgIGxpbmtfdXJsOiBcImh0dHA6Ly9qYW1lcy1sb2dhbi5naXRodWIuaW8vbmFzaHZpbGxlLWFkdmVudHVyZS9cIixcbiAgICAgICAgYWx0OiBcIk5hc2h2aWxsZSBDdWx0dXJlIENyYXdsXCJ9XG5cbiAgICBdO1xuICB9KVxuXG4gIC5mYWN0b3J5KCdDb2xvcnMnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICByYW5kb21Db2xvcigpIHtcbiAgICAgICAgcmV0dXJuIFwiI1wiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk1hdGgucG93KDE2LCA2KSkudG9TdHJpbmcoMTYpO1xuICAgICAgfVxuXG4gICAgfVxuICB9KTtcbiJdLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9